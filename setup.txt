# ChatGPT Overlay - PowerShell Setup Script for Windows
# Run this in PowerShell to create the entire project structure

Write-Host "üöÄ Creating ChatGPT Overlay Project..." -ForegroundColor Cyan

# Create main directory
New-Item -ItemType Directory -Path "chatgpt-overlay" -Force | Out-Null
Set-Location "chatgpt-overlay"

# Create directory structure
$directories = @(
    "app\src\main\java\com\overlay\chatgpt",
    "app\src\main\res\drawable",
    "app\src\main\res\layout",
    "app\src\main\res\values",
    "app\src\main\res\mipmap-xxxhdpi",
    "gradle\wrapper",
    ".github\workflows"
)

foreach ($dir in $directories) {
    New-Item -ItemType Directory -Path $dir -Force | Out-Null
}

Write-Host "üìÅ Directory structure created..." -ForegroundColor Green

# Create root .gitignore
@"
*.apk
*.ap_
*.aab
*.dex
*.class
bin/
gen/
out/
release/
.gradle/
build/
local.properties
*.iml
.idea/
.DS_Store
/captures
.externalNativeBuild
.cxx
*.jks
*.keystore
"@ | Out-File -FilePath ".gitignore" -Encoding UTF8

# Create settings.gradle.kts
@"
pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "ChatGPTOverlay"
include(":app")
"@ | Out-File -FilePath "settings.gradle.kts" -Encoding UTF8

# Create root build.gradle.kts
@"
plugins {
    id("com.android.application") version "8.2.0" apply false
    id("org.jetbrains.kotlin.android") version "1.9.20" apply false
}
"@ | Out-File -FilePath "build.gradle.kts" -Encoding UTF8

# Create gradle.properties
@"
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
kotlin.code.style=official
android.nonTransitiveRClass=true
"@ | Out-File -FilePath "gradle.properties" -Encoding UTF8

# Create gradle-wrapper.properties
@"
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.2-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
"@ | Out-File -FilePath "gradle\wrapper\gradle-wrapper.properties" -Encoding UTF8

# Create app/.gitignore
@"
/build
"@ | Out-File -FilePath "app\.gitignore" -Encoding UTF8

# Create app/build.gradle.kts
@"
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.overlay.chatgpt"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.overlay.chatgpt"
        minSdk = 21
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
}
"@ | Out-File -FilePath "app\build.gradle.kts" -Encoding UTF8

# Create app/proguard-rules.pro
@"
-keep class com.overlay.chatgpt.** { *; }
"@ | Out-File -FilePath "app\proguard-rules.pro" -Encoding UTF8

# Create AndroidManifest.xml
@"
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/Theme.ChatGPTOverlay"
        tools:targetApi="31">
        
        <activity
            android:name=".OverlayControlActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service
            android:name=".OverlayService"
            android:enabled="true"
            android:exported="false" />
    </application>

</manifest>
"@ | Out-File -FilePath "app\src\main\AndroidManifest.xml" -Encoding UTF8

# Create activity_main.xml
@"
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="24dp"
    android:gravity="center"
    android:background="#1a1a1a">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/app_name"
        android:textSize="28sp"
        android:textStyle="bold"
        android:textColor="#ffffff"
        android:layout_marginBottom="8dp" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="üåô"
        android:textSize="48sp"
        android:layout_marginBottom="24dp" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Requesting overlay permission..."
        android:textSize="16sp"
        android:textColor="#cccccc"
        android:gravity="center" />

</LinearLayout>
"@ | Out-File -FilePath "app\src\main\res\layout\activity_main.xml" -Encoding UTF8

# Create strings.xml
@"
<resources>
    <string name="app_name">ChatGPT Overlay</string>
</resources>
"@ | Out-File -FilePath "app\src\main\res\values\strings.xml" -Encoding UTF8

# Create colors.xml
@"
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
</resources>
"@ | Out-File -FilePath "app\src\main\res\values\colors.xml" -Encoding UTF8

# Create themes.xml
@"
<resources xmlns:tools="http://schemas.android.com/tools">
    <style name="Theme.ChatGPTOverlay" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="android:statusBarColor">@color/black</item>
    </style>
</resources>
"@ | Out-File -FilePath "app\src\main\res\values\themes.xml" -Encoding UTF8

# Create GitHub Actions workflow
@"
name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew assembleDebug
      
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: app-debug
        path: app/build/outputs/apk/debug/app-debug.apk
"@ | Out-File -FilePath ".github\workflows\build.yml" -Encoding UTF8

# Create README.md
@"
# ChatGPT Ambient Overlay üåô

An elegant floating overlay for Android that provides an ambient presence while using ChatGPT.

## ‚ú® Features

- **Multiple Position Modes**: Top corner, sidebar, ambient background, or custom
- **Adaptive Behavior**: Automatically fades when keyboard appears
- **Idle Animations**: Gentle breathing effect every 8 seconds
- **Persistent State**: Remembers your position and mode across sessions
- **Drag & Reposition**: Move it anywhere on screen

## üì≤ Quick Start

``````bash
# Clone and build
git clone https://github.com/yourusername/chatgpt-overlay.git
cd chatgpt-overlay
./gradlew assembleDebug
``````

## üé® Add Your Avatar

Place your image at: ``app\src\main\res\drawable\avatar.png``

## üöÄ Build APK

``````bash
./gradlew assembleDebug
# Find APK at: app/build/outputs/apk/debug/app-debug.apk
``````

## üéÆ Controls

- **Double-tap**: Cycle position modes
- **Drag**: Move to custom position
- **Auto-fade**: Fades when keyboard appears

## üìù License

MIT License
"@ | Out-File -FilePath "README.md" -Encoding UTF8

# Create OverlayControlActivity.kt
@"
package com.overlay.chatgpt

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity

class OverlayControlActivity : AppCompatActivity() {
    
    private val OVERLAY_PERMISSION_REQUEST = 1001
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (!Settings.canDrawOverlays(this)) {
                requestOverlayPermission()
            } else {
                startOverlayService()
            }
        } else {
            startOverlayService()
        }
    }
    
    private fun requestOverlayPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val intent = Intent(
                Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                Uri.parse("package:`$packageName")
            )
            startActivityForResult(intent, OVERLAY_PERMISSION_REQUEST)
        }
    }
    
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        
        if (requestCode == OVERLAY_PERMISSION_REQUEST) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && Settings.canDrawOverlays(this)) {
                startOverlayService()
            } else {
                Toast.makeText(this, "Overlay permission required", Toast.LENGTH_LONG).show()
            }
        }
    }
    
    private fun startOverlayService() {
        val serviceIntent = Intent(this, OverlayService::class.java)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForegroundService(serviceIntent)
        } else {
            startService(serviceIntent)
        }
        finish()
    }
    
    companion object {
        fun sendFadeCommand(context: Context) {
            context.startService(Intent(context, OverlayService::class.java).apply {
                action = "FADE"
            })
        }
        
        fun sendRestoreCommand(context: Context) {
            context.startService(Intent(context, OverlayService::class.java).apply {
                action = "RESTORE"
            })
        }
    }
}
"@ | Out-File -FilePath "app\src\main\java\com\overlay\chatgpt\OverlayControlActivity.kt" -Encoding UTF8

Write-Host ""
Write-Host "‚úÖ Project structure created successfully!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Next steps:" -ForegroundColor Yellow
Write-Host "1. Copy OverlayService.kt to: app\src\main\java\com\overlay\chatgpt\" -ForegroundColor White
Write-Host "2. Add your avatar image to: app\src\main\res\drawable\avatar.png" -ForegroundColor White
Write-Host "3. Open project in Android Studio" -ForegroundColor White
Write-Host "4. Build: .\gradlew.bat assembleDebug" -ForegroundColor White
Write-Host ""
Write-Host "üí° Or push to GitHub and let Actions build it for you!" -ForegroundColor Cyan
Write-Host ""
Write-Host "Current location: $(Get-Location)" -ForegroundColor Gray
Write-Host ""